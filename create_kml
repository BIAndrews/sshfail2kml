#!/usr/bin/php
<?php
/**************************************************************************************************
										      Bryan Andrews
									     bryanandrews@gmail.com
									http://www.bryanandrews.org

                  SAFE TO CRON THIS - DUPLICATE ENTRIES WILL BE IGNORED

 Requirements
 - php cli
 - php pdo (for sqlite3)

***************************************************************************************************/


/************************************************************
 * DEFAULT VARIABLES, THESE ARE COMMAND LINE SWITCH OPTIONS *
 ************************************************************/

$file = 	"auto";				// this is the syslog file where failed sshd attempts are logged
$regex = 	"/.*Failed password.*/";	// regex used to find failed SSH login attmepts, shouldn't be changed
$savefile = 	"sshfail2kml.json";		// JSON file, relative path
$sqlitedb = 	"sshfail2kml.sqlite";		// SQLite3 DB file, relative path
$kmlfile =	"sshfail2kml.kml";		// KML file, relative path
$maxprevious =	"6";				// max number of previous attempts to show in the KML map
$geoipREST =	"http://www.telize.com/geoip/";	// You guys rock, thank you
$DEBUG = 	0;


//***************************************************************************************************
//***************************************************************************************************

$time_start = microtime(true); 

// safety
if (PHP_SAPI !== 'cli' || !empty($_SERVER['REMOTE_ADDR']))  { // command line
  print "No httpd access.\n";
  exit(1);
}


$opts = getopt("f:j:s:k:m:g:hdq"); 
foreach (array_keys($opts) as $opt) switch (strtolower($opt)) {

  case 'q':
    $QUIET = TRUE;
    $DEBUG = FALSE;
    break;

  case 'd':
    $DEBUG = TRUE;
    break;

  case 'f':
    $file = $opts['f'];
    if (!is_file($file)) { print "ERROR: $file is not a readble file.\n"; exit(1); }
    break;

  case 'j':
    $savefile = $opts['j'];
    break;

  case 's':
    $sqlitedb = $opts['s'];
    break;

  case 'k':
    $kmlfile = $opts['k'];
    break;

  case 'm':
    $maxprevious = $opts['m'];
    if (!is_numeric($maxprevious)) { print "ERROR: $maxprevious is not an integer.\n"; exit(1); }
    break;

  case 'g':
    $geoipREST = $opts['g'];
    if(!filter_var($geoipREST, FILTER_VALIDATE_URL)) { print "ERROR: GeoIP REST URL provided is not a valid URL. See: http://www.telize.com/geoip/\n"; exit(1); }
    break;

  case 'h':
    print "$_SERVER[SCRIPT_NAME] [-f] [-j] [-s] [-k] [-m] [-g] [-h] [-q] [-d]\n
	-f file		Syslog secure or auth.log log file to process. 	 Default: Auto detect
	-j file		JSON file. 					 Default: sshfail2kml.json
	-s file		SQLite3 DB file. 				 Default: sshfail2kml.sqlite
	-k file		KML file. 					 Default: sshfail2kml.kml
	-m int		Max number of previous hits to show in KML file. Default: 6
	-g url		URL to the GeoIP REST API to use. 		 Default: http://www.telize.com/geoip/
	-h		This help screen.
	-q		Be quiet.
	-d		Enable debug mode.\n";
    exit(1);
}

if ($file == "auto") {

	if (is_file("/var/log/secure")) {

		$file = "/var/log/secure";
		if ($DEBUG) print "Detected /var/log/secure\n";

	} elseif (is_file("/var/log/auth.log")) {

		$file = "/var/log/auth.log";
		if ($DEBUG) print "Detected /var/log/auth.log\n";

	} else {

		print "ERROR: Failed to auto detect syslog auth.log or secure file.\n";
		exit(1);
	}

}

if ($DEBUG) {
  print "\$file = $file\n";
  print "\$savefile = $savefile\n";
  print "\$sqlitedb = $sqlitedb\n";
  print "\$kmlfile = $kmlfile\n";
  print "\$maxprevious = $maxprevious\n";
  print "\$geoipREST = $geoipREST\n";
}

/*
 * SQLITE3 DATABASE CONNECTION - REQUIRED
*/

$db = new SQLite3($sqlitedb) or die("Unable to open SQLite3 database at $sqlitedb\n");
$query = "
BEGIN;

 CREATE TABLE IF NOT EXISTS previousFails (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  line STRING UNIQUE NOT NULL,
  ip CHAR(15),
  t TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
 CREATE INDEX IF NOT EXISTS line ON previousFails (line);
 CREATE INDEX IF NOT EXISTS ip ON previousFails (ip);
 CREATE INDEX IF NOT EXISTS t ON previousFails (t);

 CREATE TABLE IF NOT EXISTS ipaddresses (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  ip CHAR(15) UNIQUE NOT NULL,
  count INT, 
  geoip INT,
  latitude REAL,
  longitude REAL,
  country_name CHAR(64),
  city CHAR(64),
  state CHAR(64),
  abuse_email CHAR(128),
  t TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
 CREATE INDEX IF NOT EXISTS ip ON ipaddresses (ip);
 CREATE INDEX IF NOT EXISTS count ON ipaddresses (count);
 CREATE INDEX IF NOT EXISTS country_name ON ipaddresses (country_name);

COMMIT;
";

$db->exec($query) or die("Create SQLite3 database failed but DB file open worked.\n");

/*
 * This is a great way to use DNS to get the abuse email of an IP. 
 * See: https://abusix.com/contactdb.html
 *
 * array getAbuseEmail ( string $ip )
 *
*/
function getAbuseEmail ($ip) {

	$rval = FALSE;

	/* EXAMPLE ARRAY RETURNED
	Array
	(
	    [0] => Array
	        (
	            [host] => 43.255.191.180.abuse-contacts.abusix.org
	            [type] => TXT
	            [txt] => abuse@globenet.com.ph
	            [entries] => Array
	                (
	                    [0] => abuse@globenet.com.ph
	                )
	
	            [class] => IN
	            [ttl] => 599
	        )
	)
	*/

	if ($array = dns_get_record("${ip}.abuse-contacts.abusix.org", DNS_TXT)) {
		$rval = $array[0][txt];
		if ($DEBUG) print "Found abuse contact $rval for IP $ip\n";
	}

	return $rval;
}

/*
 * This updates the SQLite table ipaddresses with index details for easier and faster data mining
 *
 * bool updateSQLRecord ( string $ip, array $r )
*/
function updateSQLRecord ($ip, $r) {

	global $db, $DEBUG;

	# See: http://stackoverflow.com/questions/418898/sqlite-upsert-not-insert-or-replace/4330694#4330694
	$query = "
	INSERT OR REPLACE INTO ipaddresses (id, ip, count, geoip, latitude, longitude, country_name, city, state, abuse_email) 
	  VALUES (  (SELECT id FROM ipaddresses WHERE ip = '$ip'),
            \"$ip\",
            \"$r[count]\",
            \"$r[geoip]\",
            \"$r[latitude]\",
            \"$r[longitude]\",
            \"".addslashes($r[country_name])."\",
            \"".addslashes($r[city])."\",
            \"".addslashes($r[state])."\",
            \"".addslashes($r[abuse_email])."\"
          );
	";

	//if ($DEBUG) print "$query\n";

	if ($db->exec($query)) {

		// good
		$resobj = $db->query("SELECT id FROM ipaddresses WHERE ip = '$ip'");
		$row = $resobj->fetchArray();
		return $row['id']; // went ok so we return the ID inserted

	} else {

		print "$query \nERROR: sqlite ipaddress update failed.\n";
		exit(1);

	}

	return FALSE; // should never get to this point
}

/*
 * bool sshfail2KMLWrite ( array $badguys )
*/
function sshfail2KMLWrite ($badguys) {

	global $DEBUG, $kmlfile, $db, $maxprevious;
	$rval = TRUE;
	$hostname = gethostname();

    	$k .= "<?xml version='1.0' encoding='UTF-8'?>\n";
    	$k .= "<kml xmlns='http://www.opengis.net/kml/2.2'>\n";
    	$k .= "<Document>\n";
    	$k .= "<name>$hostname sshfail2kml.kml</name>\n";
    	$k .= "<open>1</open>\n";
    	$k .= "   <Style id='StyleDocument'>\n";
    	$k .= "    <LabelStyle>\n";
    	$k .= "      <color>ff0000cc</color>\n";
    	$k .= "    </LabelStyle>\n";
    	$k .= "  </Style>\n";

    	/*
    	[218.65.30.73] => Array
        (
            [count] => 45
            [geoip] => 1
            [latitude] => 28.549999237061
            [longitude] => 115.93329620361
            [country_name] => China
            [city] => Nanchang
            [state] => 03
            [abuse_email] => abuse@globenet.com.ph
        )
    	*/

	if ($DEBUG) print "\nCreating KML file...\n";

    	foreach ($badguys as $i => $v) {

		// get the last $maxprevious attempts
		if ($DEBUG2) print "SELECTing last $maxprevious attempts from sqlite3 DB from $i ";
                $result = $db->query("SELECT line FROM previousFails WHERE ip = '$i' ORDER BY t DESC LIMIT $maxprevious");

		if (!is_numeric($v[city]) && $v[city] != "") {
			$from = "$v[city]";
		}
		if (!is_numeric($v[state]) && $v[state] != "") {
			$from .= " $v[state]";
		}
		if ($from != "") {
			$from = "from $from";
		}

		// grab the last X attempts from the SQLite3 DB and record them
		if ($result) {
			$lastX = "<br />\n";
			while($res = $result->fetchArray(SQLITE3_ASSOC)){ 
				if ($DEBUG2) print ".";
				$lastX .= $res['line']." <br />\n";
			}
			if ($DEBUG2) print "\n";
		} else {
			print "FAILED: SQLite3 select query to get last $maxprevious attempts from $i\n";
		}

		// If we have a recorded abuse email, lets show it
		if ($v[abuse_email] != "") $email .= " - $v[abuse_email]";

        	$k .= "<Placemark>\n";
        	$k .= "  <name>$v[country_name] $email</name>\n";
        	$k .= "  <description>".number_format($v[count])." SSH attempt(s) $from <span style=\"font-size:9px\">$lastX</span></description>\n";
        	$k .= "  <Point>\n";
        	$k .= "    <coordinates> $v[longitude], $v[latitude], 0</coordinates>\n";
        	$k .= "  </Point>\n";
        	$k .= " </Placemark>\n";

		unset($from); unset($email);
    	}

    	$k .= "</Document>\n";
    	$k .= "</kml>\n";

  	// when debugging also dump XML to console
   	//if ($DEBUG) print "$k\n";

	if (!file_put_contents($kmlfile, $k)) {
		print "ERROR: unable to save KML XML to $kmlfile\n";
		$rval = FALSE;
	}

	return $rval;
}

/*
 * Just a fast way to make a byte int human readable
 * See: http://php.net/manual/en/function.filesize.php
*/
function human_filesize($bytes, $decimals = 2) {
  $sz = 'BKMGTP';
  $factor = floor((strlen($bytes) - 1) / 3);
  return sprintf("%.{$decimals}f", $bytes / pow(1024, $factor)) . @$sz[$factor];
}

/*
 * 	LOOP THROUGH THE SECURE LOG FILE FOR FAILED SSH LOGIN ATTEMPTS AND RECORD/INDEX/LOOKUP
*/

// Get the last runs cache file so we can increment values.
if (is_file($savefile)) {
	$badguys = json_decode(file_get_contents($savefile), true);
}


if (is_readable($file)) {				# main loop

	$readfile = file_get_contents ($file);
	preg_match_all ($regex, $readfile, $matches);

	if (is_array($matches)) {

		foreach ($matches[0] as $v) {

			/*
			Mar 30 11:09:44 colo3 sshd[19366]: Failed password for invalid user (created) from 80.56.95.211 port 50632 ssh2
			Mar 30 11:09:47 colo3 sshd[19368]: Failed password for invalid user NETWORK from 80.56.95.211 port 51824 ssh2
			Mar 29 05:57:49 colo3 sshd[22990]: Failed password for root from 115.230.127.55 port 39075 ssh2
			*/

			$v = preg_replace('/\s+/', ' ', $v); 							// remove all double spaces to clean it up for the explode
			$v = str_replace("Failed password for invalid user", "Failed password for", $v);	// remove a string to make it all neat for explode

			// Check to see if we've already processed this hit before, if so skip it...
			$result = $db->query("SELECT * from previousFails WHERE line = '$v'"); // This is indexed to go fast
			$row = $result->fetchArray();
			if (is_array($row)) {
				// previously recorded hit, ignore
				if ($DEBUG) print ".";
				continue;
			}

			if ($DEBUG) print "\n";

			$items = explode(" ", $v);

			/* $v = (
			    [0] => Mar
			    [1] => 29
			    [2] => 03:18:57
			    [3] => colo3
			    [4] => sshd[19712]:
			    [5] => Failed
			    [6] => password
			    [7] => for
			    [8] => root
			    [9] => from
			    [10] => 115.230.126.151
			    [11] => port
			    [12] => 48091
			    [13] => ssh2
			) */

			if ($items[10] == "127.0.0.1") {
				if ($DEBUG) print "Skipping record for hit from 127.0.0.1\n";
				continue; # lets skip this record if it was a failed login from localhost
			}

			if ($DEBUG) print "Logging failed attempt by ".$items[10];
			//if ($DEBUG) print "INSERT INTO previousFails (line, ip) VALUES ('$v', '".$items[10]."')\n";

			// Insert into the SQLite3 DB so we don't count this again
			$result = $db->query("INSERT INTO previousFails (line, ip) VALUES ('$v', '".$items[10]."')");

			if (!$result) {
				print "ERROR: unable to insert record into SQLite3 DB\n"; // not strictly fatal but maybe this should be
			}

			$badguys[$items[10]]["count"]++;

			if (!isset($badguys[$items[10]]["geoip"])) { // lets only ever do this once

				if ($DEBUG) print " GeoIP lookup for $items[10] ...";

				sleep(rand(1,3)); // lets be nice to the upstream geoip API
				$record = json_decode(file_get_contents("$geoipREST/$items[10]"));

				if (is_object($record)) {

					if ($DEBUG) print " city is $record->city\n";
	
					$badguys[$items[10]]["geoip"] = 	1;
					$badguys[$items[10]]["latitude"] = 	$record->latitude;
					$badguys[$items[10]]["longitude"] = 	$record->longitude;
					$badguys[$items[10]]["country_name"] = 	$record->country;
					$badguys[$items[10]]["city"] = 		$record->city;
					$badguys[$items[10]]["state"] = 	$record->region;
					$badguys[$items[10]]["timezone"] = 	$record->timezone;
					$badguys[$items[10]]["county_code3"] = 	$record->county_code3;
					$badguys[$items[10]]["abuse_email"] = 	getAbuseEmail($items[10]);

					// This is where we populate/update the ipaddresses SQLite3 database table

					if ($rowid = updateSQLRecord($items[10], $badguys[$items[10]])) {
						// good
						if ($DEBUG) print " Added/Updated SQL record $rowid\n";
					} else {
						// ipaddress insert failed
						print "ERROR: failed to add or update the SQLite3 ipaddresses table with the details of $items[10]\n";
						exit(1);
					}

				} else {

					if ($DEBUG) print " not found.\n";

					$badguys[$items[10]]["geoip"] = 	0;
				}

			} else {

				if ($DEBUG) print " not looking up GeoIP details because of previous failed attempt.\n";

			}

		}

		//if ($DEBUG) print_r($badguys);

		// convert the array to the KML file or print if in debug mode
		sshfail2KMLWrite ($badguys);

		// save game
		if (file_put_contents($savefile, json_encode($badguys,TRUE))) {
			if ($DEBUG) print "Saved ".human_filesize(strlen(json_encode($badguys,TRUE)))." to $savefile\n";
		} else {
			print "ERROR: unable to save data to $savefile\n";
		}


	} else {
		print "No matches found.\n";
	}

} else {
	print "ERROR: unable to read $file. Do you need to run this as sudo?\n";
	exit(1);
}

$time_end = microtime(true);
$execution_time = ($time_end - $time_start);
if ($QUIET != TRUE) {
	print "Total Execution Time: ".$execution_time." s processing $file ".human_filesize(filesize($file))." saved to $savefile\n";
}
?>
